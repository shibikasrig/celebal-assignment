# -*- coding: utf-8 -*-
"""week_6_assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qk3oO6ZNGudwYNtKu02mX5qqGbiof9jH
"""

import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from scipy.stats import uniform

df = pd.read_csv("Housing.csv")
print(df.head())
print(df.info())

bins = [0, 1000000, 2000000, np.inf]
labels = ['Low', 'Medium', 'High']

df['PriceCategory'] = pd.cut(df['price'], bins=bins, labels=labels)

label_encoder = LabelEncoder()
df['PriceCategoryEncoded'] = label_encoder.fit_transform(df['PriceCategory'])

df = df.drop(['price'], axis=1)

df_encoded = pd.get_dummies(df.drop(['PriceCategory'], axis=1), drop_first=True)

# Split features and target
X = df_encoded.drop('PriceCategoryEncoded', axis=1)
y = df_encoded['PriceCategoryEncoded']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

models = {
    "Logistic Regression": LogisticRegression(max_iter=1000),
    "Random Forest": RandomForestClassifier(),
    "SVM": SVC()
}

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    print(f"\n--- {name} ---")
    print("Accuracy:", accuracy_score(y_test, y_pred))
    print("Precision:", precision_score(y_test, y_pred, average='weighted'))
    print("Recall:", recall_score(y_test, y_pred, average='weighted'))
    print("F1 Score:", f1_score(y_test, y_pred, average='weighted'))

param_grid_rf = {
    'n_estimators': [100, 200],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5]
}

grid_search_rf = GridSearchCV(RandomForestClassifier(), param_grid_rf, cv=5, scoring='f1_weighted', verbose=1)
grid_search_rf.fit(X_train, y_train)

print("\nBest Params (Random Forest - GridSearchCV):", grid_search_rf.best_params_)

param_dist_svc = {
    'C': uniform(0.1, 10),
    'kernel': ['linear', 'rbf'],
    'gamma': ['scale', 'auto']
}

random_search_svc = RandomizedSearchCV(SVC(), param_distributions=param_dist_svc, n_iter=10,
                                       cv=5, scoring='f1_weighted', random_state=42, verbose=1)
random_search_svc.fit(X_train, y_train)

print("\nBest Params (SVM - RandomizedSearchCV):", random_search_svc.best_params_)

# Choose best model (e.g., from GridSearchCV)
best_model = grid_search_rf.best_estimator_

y_pred_final = best_model.predict(X_test)

print("\n--- Final Best Model Performance ---")
print(classification_report(y_test, y_pred_final, target_names=label_encoder.classes_))